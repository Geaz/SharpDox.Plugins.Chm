<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Plugins.Chm.Steps" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Model.Documentation.Article" #>
<#@ import namespace="SharpDox.Sdk.Config" #>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
	<HEAD>
		<meta name="GENERATOR" content="sharpDox">
	</HEAD>
	<BODY>
		<ul>
		<li> <object type="text/sitemap">
						<param name="Name" value="<#= StepInput.SDProject.ProjectName #>">
						<param name="Local" value="<#= StepInput.SDProject.ProjectName.Replace(" ", "") #>-Index.html">
					</object>

			<ul>
				<# if(StepInput.SDProject.Articles.Count > 0) {
					var articles = StepInput.SDProject.Articles.ContainsKey(StepInput.CurrentLanguage) ? StepInput.SDProject.Articles[StepInput.CurrentLanguage] : StepInput.SDProject.Articles["default"];
					foreach (var article in articles)
					{ #>
						<li> <object type="text/sitemap">
									<param name="Name" value="<#= WebUtility.HtmlEncode(article.Title) #>">
									<param name="Local" value="<#= Helper.RemoveIllegalCharacters(article.Title.Replace(" ", "_")) #>.html">
							</object>

						<# if (article is SDDocPlaceholder)
						{ 
							var sdSolution = StepInput.SDProject.Solutions[((SDDocPlaceholder)article).SolutionFile]; 
							var sdRepository = sdSolution.Repositories.SingleOrDefault(r => r.TargetFx.Identifier == StepInput.CurrentTargetFx.Identifier);
							if(sdRepository != null)
							{ #>							
								<ul>
								<# var apiNavTemplate = new ApiNavTemplate { SDRepository = sdRepository }; #>
								<#= apiNavTemplate.TransformText() #>
								</ul>
							</li>
						<#  } else { #> </li> <# }
						}
						else if(article.Children.Count > 0)
						{ #>
								<ul>
								<# var articleNavTemplate = new ArticleNavTemplate { Articles = article.Children }; #>
								<#= articleNavTemplate.TransformText() #>
								</ul>
							
						<# } #>

						</li>
				<#	}
				} else {
					var sdSolution = StepInput.SDProject.Solutions.Values.Single();
					var sdRepository = sdSolution.Repositories.SingleOrDefault(r => r.TargetFx.Identifier == StepInput.CurrentTargetFx.Identifier);
					if(sdRepository != null)
					{
						var apiNavTemplate = new ApiNavTemplate { SDRepository = sdRepository }; #>
						<#= apiNavTemplate.TransformText() #>
				<#	}
				} #>

			</ul>
		</li>
		</ul>
	</BODY>
</HTML>
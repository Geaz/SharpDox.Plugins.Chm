// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 12.0.0.0
//  
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SharpDox.Plugins.Chm.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using SharpDox.Plugins.Chm.Steps;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class StylesheetTemplate : StylesheetTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n/* layout */\r\nhtml, body{\r\n\tmargin:0;\r\n\tpadding:0;\r\n}\r\n\r\n#header{\r\n\tpadding:5px" +
                    " 25px;\r\n}\r\n\r\n#header h2{\r\n\tmargin:0;\r\n}\r\n\r\n#subheader{\r\n\tdisplay:block;\r\n\tbackgr" +
                    "ound: ");
            
            #line 24 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.BreadCrumbBackgroundColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\tborder-top: 1px solid ");
            
            #line 25 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.BreadCrumbBorderColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\tborder-bottom: 1px solid ");
            
            #line 26 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.BreadCrumbBorderColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\tpadding: 2px 25px;\r\n\tmargin:0;\r\n\tmargin-top:5px;\r\n\tmargin-bottom:5px;\r\n}\r\n\r\n#" +
                    "subheader a{\r\n\ttext-decoration:none;\r\n\tfont-weight:bold;\r\n\tcolor: ");
            
            #line 36 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.BreadCrumbLinkColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\tfont-size:12px;\r\n}\r\n\r\n#subheader a:hover{\r\n\tcolor: ");
            
            #line 41 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.BreadCrumbLinkHoverColor));
            
            #line default
            #line hidden
            this.Write(";\r\n}\r\n\r\n#content {\r\n\tpadding: 10px 25px;\r\n}\r\n\r\n.typesite{\r\n\tdisplay:none;\r\n}\r\n\r\n." +
                    "box-title{\r\n\tmargin-top:0;\r\n}\r\n\r\n.namespace-title{\r\n\tfont-size:1em;\r\n\tcolor: #AA" +
                    "A;\r\n}\r\n\r\n.syntax-box {\r\n    background: none repeat scroll 0 0 ");
            
            #line 62 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.SyntaxBoxBackgroundColor));
            
            #line default
            #line hidden
            this.Write(";\r\n    border: 1px solid ");
            
            #line 63 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.SyntaxBoxBorderColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\tcolor: ");
            
            #line 64 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.SyntaxBoxTextColor));
            
            #line default
            #line hidden
            this.Write(@";
    padding: 5px;
}

.doc-box, .syntax-box, .table-box, .list-box, .text-box {
    margin: 10px 20px;
}

.doc-box p{
	margin:0;
}

.inline{
	margin: 0 25px;
}

.diagram-box {
    text-align: center;
	margin-top: 10px;
}

.divider {
    background-color: #DADADA;
    border-bottom: 1px solid #FFFFFF;
    height: 1px;
    margin: 0.5em 0 1.5em;
}

.divider span {
    background-color: #F58026;
    display: block;
    height: 1px;
    width: 50px;
	overflow:hidden;
}

/* #Tables
================================================== */

	.table-box{
		width: 100%;
	}

	table{
		width: 100%;
		border-spacing:0;
		border-collapse:collapse;
	}

	th{
		background: ");
            
            #line 114 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.TableHeaderBackgroundColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\t}\r\n\r\n\t.even{\r\n\t\tbackground: #F6F5F1;\r\n\t}\r\n\r\n\ttd{\r\n\t\tpadding:5px 10px 5px 10px" +
                    ";\r\n\t}\r\n\r\n\ttd p{\r\n\t\tmargin:0;\r\n\t}\r\n\r\n\tthead{\r\n\t\tbackground: none repeat scroll 0 " +
                    "0 ");
            
            #line 130 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.TableHeaderBackgroundColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\tfont-family: \"Segoe UI\";\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t\r\n\tthead td{\r\n\t\tborder-" +
                    "bottom: 1px solid ");
            
            #line 136 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.TableHeaderBorderColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\tborder-top: 1px solid ");
            
            #line 137 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.TableHeaderBorderColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\t}\r\n\t\r\n\t.icon-column {\r\n\t\twidth: 15px;\r\n\t}\r\n\r\n/* #Lists\r\n=====================" +
                    "============================= */\r\n\r\n\t.list-box\r\n\t{\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n/* #Ty" +
                    "pography\r\n================================================== */\r\n\tbody {\r\n\t\tback" +
                    "ground: ");
            
            #line 155 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.BackgroundColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\tfont: 14px/24px \'Segoe UI\', \'Comic Sans MS\';\r\n\t\tcolor: ");
            
            #line 157 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.TextColor));
            
            #line default
            #line hidden
            this.Write(";\r\n\t}\r\n\t\r\n\th1, h2, h3, h4, h5, h6 {\r\n\t\tcolor: ");
            
            #line 161 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.TextColor));
            
            #line default
            #line hidden
            this.Write(@";
		font: 60px/68px 'Segoe UI Light', 'Comic Sans MS';
	}
	h1 a, h2 a, h3 a, h4 a, h5 a, h6 a { font-weight: inherit; }
	h1 { font-size: 42pt; line-height: 50px; margin-bottom: 14px;}
	h2 { font-size: 20pt; line-height: 40px; margin-bottom: 10px; }
	h3 { font-size: 18pt; line-height: 34px; }
	h4 { font-size: 11pt; font-weight:600; line-height: 30px; margin-bottom: 4px; }
	h5 { font-size: 11pt; line-height: 24px; }
	h6 { font-size: 11pt; line-height: 21px; }

	p { margin: 0 0 20px 0; }
	p img { margin: 0; }
	p.lead { font-size: 21px; line-height: 27px; color: #777;  }

	em { font-style: italic; }
	strong { font-weight: bold; color: #333; }
	small { font-size: 80%; }

	hr { border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 10px 0 30px; height: 0; }


/* #Links
================================================== */
	a, a:visited { color: ");
            
            #line 185 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.LinkColor));
            
            #line default
            #line hidden
            this.Write("; text-decoration: none; outline: 0; }\r\n\ta:hover, a:focus { color: ");
            
            #line 186 "D:\Github\SharpDox.Plugins.Chm\Templates\StylesheetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.ChmConfig.LinkHoverColor));
            
            #line default
            #line hidden
            this.Write(@"; }
	p a, p a:visited { line-height: inherit; }

/* #Markdown
================================================== */
	.markdown img {
	  width: 100%;
	}
	.markdown strong {
	  font-weight: bold;
	}
	.markdown em {
	  font-style: italic;
	}
	.markdown ol {
	  list-style-type: decimal;
	  margin-left: 20px;
	}
	.markdown ul{
		list-style-type: disc;
		margin-left:25px;
		margin-bottom:15px;
	}
	.markdown blockquote {
	  background: #f6f5f1;
	  border: 1px solid #dadada;
	  padding: 5px;
	  margin-top: 15px;
	  margin-bottom: 15px;
	}
	.markdown blockquote p {
	  margin: 0;
	}
	.markdown pre {
	  background: #f6f5f1;
	  border: 1px solid #dadada;
	  padding: 5px;
	  margin-top: 15px;
	  margin-bottom: 15px;
	  font-family: monospace;
	  display: block;
	  overflow-x: auto;
	  overflow-y: hidden;
	}
	.markdown pre p {
	  margin: 0;
	}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class StylesheetTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

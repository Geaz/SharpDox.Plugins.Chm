// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 12.0.0.0
//  
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SharpDox.Plugins.Chm.Templates.Nav
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using SharpDox.Model.Repository;
    using SharpDox.Plugins.Chm.Templates.Strings;
    using SharpDox.Sdk.Config;
    using SharpDox.Plugins.Chm.Steps;
    using MarkdownSharp;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ApiNavTemplate : ApiNavTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            
            #line 12 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 foreach (var nameSpace in SDRepository.GetAllNamespaces()) { 
            
            #line default
            #line hidden
            this.Write("                \r\n<li> <object type=\"text/sitemap\">\r\n\t\t<param name=\"Name\" value=\"" +
                    "");
            
            #line 15 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace.Fullname));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t<param name=\"Local\" value=\"");
            
            #line 16 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace.Guid));
            
            #line default
            #line hidden
            this.Write(".html\">\r\n\t</object>\r\n\r\n\t");
            
            #line 19 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 if (nameSpace.Types.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("                    \r\n\t\t<ul>\r\n\r\n\t\t");
            
            #line 23 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 foreach (var type in nameSpace.Types) {

			var sdType = SDRepository.GetTypeByIdentifier(type.Identifier); 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t<param name=\"Name\" value=\"");
            
            #line 28 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 29 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write(".html\">\r\n\t\t\t\t</object>\r\n                    \r\n\t\t\t");
            
            #line 32 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 if (sdType.Constructors.Count > 0 || sdType.Fields.Count > 0 || sdType.Properties.Count > 0 || sdType.Methods.Count > 0 || sdType.Events.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("                            \r\n\t\t\t\t<ul>\r\n\r\n\t\t\t\t");
            
            #line 36 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 if (sdType.Constructors.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t<param name=\"Name\" value" +
                    "=\"");
            
            #line 39 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Constructors));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 40 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write("-Constructors.html\">\r\n\t\t\t\t\t\t</object>\r\n\t\t\t\t\t\t<ul>\r\n\r\n\t\t\t\t\t\t");
            
            #line 44 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 foreach (var constructor in sdType.Constructors)	{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Name\"" +
                    " value=\"");
            
            #line 47 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constructor.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 48 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 48 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(constructor.Guid));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t</object> </li>\r\n\r\n\t\t\t\t\t\t");
            
            #line 51 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</li>\r\n\r\n\t\t\t\t");
            
            #line 56 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 58 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 if (sdType.Fields.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t<param name=\"Name\" value" +
                    "=\"");
            
            #line 61 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Fields));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 62 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write("-Fields.html\">\r\n\t\t\t\t\t\t</object>\r\n\t\t\t\t\t\t<ul>\r\n\r\n\t\t\t\t\t\t");
            
            #line 66 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 foreach (var field in sdType.Fields)	{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Name\"" +
                    " value=\"");
            
            #line 69 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 70 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 70 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Guid));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t</object> </li>\r\n\r\n\t\t\t\t\t\t");
            
            #line 73 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</li>\r\n\r\n\t\t\t\t");
            
            #line 78 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 80 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 if (sdType.Properties.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t<param name=\"Name\" value" +
                    "=\"");
            
            #line 83 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Properties));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 84 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write("-Properties.html\">\r\n\t\t\t\t\t\t</object>\r\n\t\t\t\t\t\t<ul>\r\n\r\n\t\t\t\t\t\t");
            
            #line 88 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 foreach (var property in sdType.Properties)	{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Name\"" +
                    " value=\"");
            
            #line 91 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 92 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 92 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Guid));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t</object> </li>\r\n\r\n\t\t\t\t\t\t");
            
            #line 95 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</li>\r\n\r\n\t\t\t\t");
            
            #line 100 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 102 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 if (sdType.Methods.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t<param name=\"Name\" value" +
                    "=\"");
            
            #line 105 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Methods));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 106 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write("-Methods.html\">\r\n\t\t\t\t\t\t</object>\r\n\t\t\t\t\t\t<ul>\r\n\r\n\t\t\t\t\t\t");
            
            #line 110 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 foreach (var method in sdType.Methods)	{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Name\"" +
                    " value=\"");
            
            #line 113 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 114 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 114 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Guid));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t</object> </li>\r\n\r\n\t\t\t\t\t\t");
            
            #line 117 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</li>\r\n\r\n\t\t\t\t");
            
            #line 122 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 124 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 if (sdType.Events.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t<param name=\"Name\" value" +
                    "=\"");
            
            #line 127 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Events));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 128 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write("-Events.html\">\r\n\t\t\t\t\t\t</object>\r\n\t\t\t\t\t\t<ul>\r\n\r\n\t\t\t\t\t\t");
            
            #line 132 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 foreach (var eve in sdType.Events)	{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<li> <object type=\"text/sitemap\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Name\"" +
                    " value=\"");
            
            #line 135 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(eve.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t\t<param name=\"Local\" value=\"");
            
            #line 136 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 136 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(eve.Guid));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t\t\t\t</object> </li>\r\n\r\n\t\t\t\t\t\t");
            
            #line 139 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</li>\r\n\r\n\t\t\t\t");
            
            #line 144 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t</ul>\r\n\r\n\t\t\t");
            
            #line 148 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t</li>\r\n\r\n\t\t");
            
            #line 152 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t</ul>\r\n\r\n\t");
            
            #line 156 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t</li>\r\n\r\n");
            
            #line 160 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 162 "D:\Github\SharpDox.Plugins.Chm\Templates\Nav\ApiNavTemplate.tt"
 public SDRepository SDRepository { get; set; } 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ApiNavTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

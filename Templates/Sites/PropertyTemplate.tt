<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Model.Repository.Members" #>
<#@ import namespace="SharpDox.Plugins.Chm.Templates.Strings" #>
<#@ import namespace="SharpDox.Sdk.Config" #>
<#@ import namespace="MarkdownSharp" #>

<div id="<#= SDProperty.Guid #>" class="typesite">
	<div id="header">
		<h2 class="type-title"><#= SDProperty.Name #></h2>
		<span class="namespace-title"><#= SDType.Namespace.Fullname #></span>
	</div>
	<div id="subheader">
		<a href="<#= ProjectInfo.ProjectName.Replace(" ", "") #>-Index.html">Start</a> > <a href="<#= SDNamespace.Guid #>.html"><#= SDNamespace.Fullname #></a> > <a href="<#= SDType.Guid #>.html"><#= SDType.Name #> > <a href="<#= SDProperty.Guid #>.html"><#= SDProperty.Name #></a>
	</div>
		
	<div id="content">
		<h3 class="box-title"><#= Strings.Syntax #></h3>
		<div class="syntax-box">
			<#= WebUtility.HtmlEncode(SDProperty.Syntax) #>
		</div>
        
		<# var language = SDProperty.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default";
		if(SDProperty.Documentation.Count > 0) { #>

			<# if(SDProperty.Documentation[language].Summary.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Summary #></h3>
				<div class="doc-box markdown">
					<#= new Markdown().Transform(SDProperty.Documentation[language].Summary.ToMarkdown()) #>
				</div>
			<# } #>

			<# if(SDProperty.Documentation[language].Remarks.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Remarks #></h3>
				<div class="doc-box markdown">
					<#= new Markdown().Transform(SDProperty.Documentation[language].Remarks.ToMarkdown()) #>
				</div>
			<# } #>

			<# if(SDProperty.Documentation[language].Example.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Example #></h3>
				<div class="doc-box markdown">
					<#= new Markdown().Transform(SDProperty.Documentation[language].Example.ToMarkdown()) #>
				</div>
			<# } #>

			<# if(SDProperty.Documentation[language].Returns.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Returns #></h3>
				<div class="doc-box markdown">
					<#= new Markdown().Transform(SDProperty.Documentation[language].Returns.ToMarkdown()) #>
				</div>
			<# } #>

			<# if(SDProperty.Documentation[language].Exceptions.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Exceptions #></h3>
				<div class="doc-box markdown">
					<# foreach(var exception in SDProperty.Documentation[language].Exceptions) { #>
						<p><#= exception.Key #></p>
						<div class="inline">
							<#= new Markdown().Transform(exception.Value.ToMarkdown()) #>
						</div>
					<# } #>
				</div>
			<# } #>

			<# if(SDProperty.Documentation[language].Params.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Parameters #></h3>
				<div class="doc-box markdown">
					<# foreach(var parameter in SDProperty.Documentation[language].Params) { #>
						<p><#= parameter.Key #></p>
						<div class="inline">
							<#= new Markdown().Transform(parameter.Value.ToMarkdown()) #>
						</div>
					<# } #>
				</div>
			<# } #>

			<# if(SDProperty.Documentation[language].TypeParams.Count > 0) { #>
				<h3 class="box-title"><#= Strings.TypeParameters #></h3>
				<div class="doc-box markdown">
					<# foreach(var typeParameter in SDProperty.Documentation[language].TypeParams) { #>
						<p><#= typeParameter.Key #></p>
						<div class="inline">
							<#= new Markdown().Transform(typeParameter.Value.ToMarkdown()) #>
						</div>
					<# } #>
				</div>
			<# } #>

		<# } #>
	</div>
</div>

<#+ 
public SDType SDType { get; set; } 
public SDProperty SDProperty { get; set; } 
public SDNamespace SDNamespace { get; set; }
public SDProjectInfo ProjectInfo { get; set; }
public string CurrentLanguage { get; set; }
public IStrings Strings { get; set; }
#>
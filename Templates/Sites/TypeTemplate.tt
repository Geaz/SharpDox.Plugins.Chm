<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Plugins.Chm.Templates.Strings" #>
<#@ import namespace="SharpDox.Plugins.Chm.Templates.Sites" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Sdk.Config" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="MarkdownSharp" #>

<html>
    <head>
        <title><#= SDType.Name #></title>
        <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
        <link rel="stylesheet" type="text/css" href="css/reset.css">
        <link rel="stylesheet" type="text/css" href="css/style.css">
        <script src="js/jquery.js" type="text/javascript"></script>

        <script type="text/javascript">
            var activeDiv;
			var oldHash = window.location.hash;

			$(document).ready(function () {
				onHashChange();
				setHashCheck();
			});

			function onHashChange(){
				if(window.location.hash) {
					if(activeDiv != undefined) activeDiv.hide();
					activeDiv = $(window.location.hash);
					$(window.location.hash).show();
				} else {
					if(activeDiv != undefined) activeDiv.hide();
					activeDiv = $("#typeIndex");
					$("#typeIndex").show();
				}
			}

			function setHashCheck(){
				oldHash = window.location.hash;

				setInterval(function() {
					if(oldHash !== window.location.hash) {
						oldHash = window.location.hash;
						onHashChange();
					}
				}, 20);
			}
        </script>

    </head>
    <body>
		<div id="typeIndex" class="typesite">
			<div id="header">
				<h2 class="type-title"><#= SDType.Name #></h2>
				<span class="namespace-title"><#= SDType.Namespace.Fullname #></span>
			</div>
			<div id="subheader">
				<a href="<#= SDRepository.ProjectInfo.ProjectName.Replace(" ", "") #>-Index.html">Start</a> > <a href="<#= SDType.Namespace.Guid #>.html"><#= SDType.Namespace.Fullname #></a> > <a href="<#= SDType.Guid #>.html"><#= SDType.Name #></a>
			</div>
		
			<div id="content">

				<h3 class="box-title"><#= Strings.Syntax #></h3>
				<div class="syntax-box">
					<#= WebUtility.HtmlEncode(SDType.Syntax) #>
				</div>

				<# if(SDType.BaseTypes.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Basetype #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var baseType in SDType.BaseTypes) { 
							if(baseType.IsProjectStranger) { #>
								<li><#= baseType.Fullname #></a></li>
							<# } else { #>
								<li><a href="<#= baseType.Guid #>.html"><#= baseType.Fullname #></a></li>
							<# } #>
						<# } #>
						</ul>
					</div>
				<# } #>

				<# if(SDType.ImplementedInterfaces.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Implements #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var implementedInterface in SDType.ImplementedInterfaces) {
							if(implementedInterface.IsProjectStranger) { #>
								<li><#= implementedInterface.Fullname #></a></li>
							<# } else { #>
								<li><a href="<#= implementedInterface.Guid #>.html"><#= implementedInterface.Fullname #></a></li>
							<# } #>
						<# } #>
						</ul>
					</div>
				<# } #>

				<# var language = SDType.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default";
				if(SDType.Documentation.Count > 0) { #>

					<# if(SDType.Documentation[language].Summary.Count > 0) { #>
						<h3 class="box-title"><#= Strings.Summary #></h3>
						<div class="doc-box markdown">
							<#= new Markdown().Transform(SDType.Documentation[language].Summary.ToMarkdown()) #>
						</div>
					<# } #>

					<# if(SDType.Documentation[language].Remarks.Count > 0) { #>
						<h3 class="box-title"><#= Strings.Remarks #></h3>
						<div class="doc-box markdown">
							<#= new Markdown().Transform(SDType.Documentation[language].Remarks.ToMarkdown()) #>
						</div>
					<# } #>

					<# if(SDType.Documentation[language].Example.Count > 0) { #>
						<h3 class="box-title"><#= Strings.Example #></h3>
						<div class="doc-box markdown">
							<#= new Markdown().Transform(SDType.Documentation[language].Example.ToMarkdown()) #>
						</div>
					<# } #>

					<# if(SDType.Documentation[language].Returns.Count > 0) { #>
						<h3 class="box-title"><#= Strings.Returns #></h3>
						<div class="doc-box markdown">
							<#= new Markdown().Transform(SDType.Documentation[language].Returns.ToMarkdown()) #>
						</div>
					<# } #>

					<# if(SDType.Documentation[language].Exceptions.Count > 0) { #>
						<h3 class="box-title"><#= Strings.Exceptions #></h3>
						<div class="doc-box markdown">
							<# foreach(var exception in SDType.Documentation[language].Exceptions) { #>
								<p><#= exception.Key #></p>
								<div class="inline">
									<#= new Markdown().Transform(exception.Value.ToMarkdown()) #>
								</div>
							<# } #>
						</div>
					<# } #>

					<# if(SDType.Documentation[language].Params.Count > 0) { #>
						<h3 class="box-title"><#= Strings.Parameters #></h3>
						<div class="doc-box markdown">
							<# foreach(var parameter in SDType.Documentation[language].Params) { #>
								<p><#= parameter.Key #></p>
								<div class="inline">
									<#= new Markdown().Transform(parameter.Value.ToMarkdown()) #>
								</div>
							<# } #>
						</div>
					<# } #>

					<# if(SDType.Documentation[language].TypeParams.Count > 0) { #>
						<h3 class="box-title"><#= Strings.TypeParameters #></h3>
						<div class="doc-box markdown">
							<# foreach(var typeParameter in SDType.Documentation[language].TypeParams) { #>
								<p><#= typeParameter.Key #></p>
								<div class="inline">
									<#= new Markdown().Transform(typeParameter.Value.ToMarkdown()) #>
								</div>
							<# } #>
						</div>
					<# } #>

					<# if(SDType.Documentation[language].SeeAlsos.Count > 0) { #>
						<h3 class="box-title"><#= Strings.SeeAlso #></h3>
						<div class="list-box">
							<ul>
							<# foreach(var sdToken in SDType.Documentation[language].SeeAlsos) 
							{ 
								var seeAlso = (SDSeeToken)sdToken;
								if(!string.IsNullOrEmpty(seeAlso.DeclaringType))
								{
									var identifier = string.Format("{0}.{1}", seeAlso.DeclaringType, seeAlso.Name);
									var sdMember = SDRepository.GetMemberByIdentifier(identifier);
									if(sdMember != null)
									{
										#> <li><a href="<#= sdMember.DeclaringType.Guid #>.html#<#= sdMember.Guid #>"><#= sdMember.Name #></a></li> <#
									}
								}
								else
								{
									var identifier = string.Format("{0}.{1}", seeAlso.Namespace, seeAlso.Name);
									var sdType = SDRepository.GetTypeByIdentifier(identifier);
									if(sdType != null)
									{
										#> <li><a href="<#= sdType.Guid #>.html"><#= sdType.Fullname #></a></li> <#
									}
								} 
							} #>
							</ul>
						</div>
					<# } #>

				<# } #>

				<# if(SDType.Uses.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Uses #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var use in SDType.Uses) { #>
							<li><a href="<#= use.Guid #>.html"><#= use.Name #></a></li>
						<# } #>
						</ul>
					</div>
				<# } #>

				<# if(SDType.UsedBy.Count > 0) { #>
					<h3 class="box-title"><#= Strings.UsedBy #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var used in SDType.UsedBy) { #>
							<li><a href="<#= used.Guid #>.html"><#= used.Name #></a></li>
						<# } #>
						</ul>
					</div>
				<# } #>

				<h2 class="box-title"><#= Strings.Members #></h2>
				<div class="table-box">
					<table>
						<thead>
							<tr>
								<td></td>
								<td><#= Strings.Name #></td>
								<td><#= Strings.Summary #></td>
							</tr>
						</thead>
						<tbody>

						<#	foreach(var sdField in SDType.Fields) {
							var typeLanguage = sdField.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default"; #>

							<tr>
								<td class="iconColumn">
									<img alt="Field-Icon" src="icons/Field_<#= sdField.Accessibility #>.png">
								</td>
								<td>
									<a title="<#= sdField.Name #>" href="<#= SDType.Guid #>.html#<#= sdField.Guid #>"><#= sdField.Name #></a>
								</td>	
								<td class="markdown">
									<# if(sdField.Documentation.Count > 0 && sdField.Documentation[typeLanguage].Summary.Count > 0) { #>
										<#= new Markdown().Transform(sdField.Documentation[typeLanguage].Summary.ToMarkdown()) #>
									<# } #>
								</td>
							</tr>
						<# }		

							foreach(var sdEvent in SDType.Events) {
							var typeLanguage = sdEvent.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default"; #>

							<tr>
								<td class="iconColumn">
									<img alt="Event-Icon" src="icons/Event_<#= sdEvent.Accessibility #>.png">
								</td>
								<td>
									<a title="<#= sdEvent.Name #>" href="<#= SDType.Guid #>.html#<#= sdEvent.Guid #>"><#= sdEvent.Name #></a>
								</td>	
								<td class="markdown">
									<# if(sdEvent.Documentation.Count > 0 && sdEvent.Documentation[typeLanguage].Summary.Count > 0) { #>
										<#= new Markdown().Transform(sdEvent.Documentation[typeLanguage].Summary.ToMarkdown()) #>
									<# } #>
								</td>
							</tr>
						<# }

							foreach(var sdConstructor in SDType.Constructors) {
							var typeLanguage = sdConstructor.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default"; #>

							<tr>
								<td class="iconColumn">
									<img alt="Constructor-Icon" src="icons/Method_<#= sdConstructor.Accessibility #>.png">
								</td>
								<td>
									<a title="<#= sdConstructor.Name #>" href="<#= SDType.Guid #>.html#<#= sdConstructor.Guid #>"><#= sdConstructor.Name #></a>
								</td>	
								<td class="markdown">
									<# if(sdConstructor.Documentation.Count > 0 && sdConstructor.Documentation[typeLanguage].Summary.Count > 0) { #>
										<#= new Markdown().Transform(sdConstructor.Documentation[typeLanguage].Summary.ToMarkdown()) #>
									<# } #>
								</td>
							</tr>
						<# }

							foreach(var sdMethod in SDType.Methods) {
							var typeLanguage = sdMethod.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default"; #>

							<tr>
								<td class="iconColumn">
									<img alt="Constructor-Icon" src="icons/Method_<#= sdMethod.Accessibility #>.png">
								</td>
								<td>
									<a title="<#= sdMethod.Name #>" href="<#= SDType.Guid #>.html#<#= sdMethod.Guid #>"><#= sdMethod.Name #></a>
								</td>	
								<td class="markdown">
									<# if(sdMethod.Documentation.Count > 0 && sdMethod.Documentation[typeLanguage].Summary.Count > 0) { #>
										<#= new Markdown().Transform(sdMethod.Documentation[typeLanguage].Summary.ToMarkdown()) #>
									<# } #>
								</td>
							</tr>
						<# }

							foreach(var sdProperty in SDType.Properties) {
							var typeLanguage = sdProperty.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default"; #>

							<tr>
								<td class="iconColumn">
									<img alt="Property-Icon" src="icons/Properties_<#= sdProperty.Accessibility #>.png">
								</td>
								<td>
									<a title="<#= sdProperty.Name #>" href="<#= SDType.Guid #>.html#<#= sdProperty.Guid #>"><#= sdProperty.Name #></a>
								</td>	
								<td class="markdown">
									<# if(sdProperty.Documentation.Count > 0 && sdProperty.Documentation[typeLanguage].Summary.Count > 0) { #>
										<#= new Markdown().Transform(sdProperty.Documentation[typeLanguage].Summary.ToMarkdown()) #>
									<# } #>
								</td>
							</tr>
						<# } #>

						</tbody>
					</table>
				</div>

				<#	if(!SDType.IsClassDiagramEmpty()) { #>
					<div class="diagram-box">
						<img class="diagram-image" src="diagrams/<#= SDType.Guid #>.png"/>
					</div>
				<# } #>
			</div>
		</div>

		<#	foreach (var constructor in SDType.Constructors)
			{
				var memberTemplate = new MemberTemplate
				{
					ProjectInfo = SDRepository.ProjectInfo, 
					SDMember = constructor, 
					SDNamespace = SDType.Namespace,
					SDType = SDType, 
					CurrentLanguage = CurrentLanguage, 
					Strings = Strings,
					SDRepository = SDRepository,
					TmpFilepath = TmpFilepath
				}; #>
				<#= memberTemplate.TransformText() #>
		<#  }
			foreach (var method in SDType.Methods)
			{
				var memberTemplate = new MemberTemplate
				{
					ProjectInfo = SDRepository.ProjectInfo, 
					SDMember = method, 
					SDNamespace = SDType.Namespace,
					SDType = SDType, 
					CurrentLanguage = CurrentLanguage, 
					Strings = Strings,
					SDRepository = SDRepository,
					TmpFilepath = TmpFilepath
				}; #>
				<#= memberTemplate.TransformText() #>
		<#  }
			foreach (var field in SDType.Fields)
			{
				var memberTemplate = new MemberTemplate
				{
					ProjectInfo = SDRepository.ProjectInfo, 
					SDNamespace = SDType.Namespace, 
					SDMember = field, 
					SDType = SDType, 
					CurrentLanguage = CurrentLanguage, 
					Strings = Strings,
					SDRepository = SDRepository,
					TmpFilepath = TmpFilepath
				}; #>
				<#= memberTemplate.TransformText() #>
		<#  }
			foreach (var property in SDType.Properties)
			{
				var memberTemplate = new MemberTemplate
				{
					ProjectInfo = SDRepository.ProjectInfo, 
					SDNamespace = SDType.Namespace, 
					SDMember = property, 
					SDType = SDType, 
					CurrentLanguage = CurrentLanguage, 
					Strings = Strings,
					SDRepository = SDRepository,
					TmpFilepath = TmpFilepath
				}; #>
				<#= memberTemplate.TransformText() #>
		<#  }
			foreach (var sdEvent in SDType.Events)
			{
				var memberTemplate = new MemberTemplate
				{
					ProjectInfo = SDRepository.ProjectInfo, 
					SDNamespace = SDType.Namespace, 
					SDMember = sdEvent, 
					SDType = SDType, 
					CurrentLanguage = CurrentLanguage, 
					Strings = Strings,
					SDRepository = SDRepository,
					TmpFilepath = TmpFilepath
				}; #>
				<#= memberTemplate.TransformText() #>
			<# } #>

    </body>
</html>

<#+ 
public SDRepository SDRepository { get; set; }
public SDType SDType { get; set; } 
public string CurrentLanguage { get; set; }
public IStrings Strings { get; set; }
public string TmpFilepath { get; set; }
#>